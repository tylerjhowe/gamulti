## GAMulti v0.05
## A set of bash functions to help manage multiple domains with Google Apps Manager, AKA GAM.
## It requires standard bash built-ins and a few standard system binaries.
## All configuration takes place in ~/.bash_gamulti (this file).
##
## author:
## tyler j. howe
## tylerjhowe@tylerjhowe.com
## 01142019

##!! There is one modification from the standard GAM install environment.
##!! The GAM installer adds "gam() { "${HOME}/bin/gam/gam" "$@" ; }" to "~/.bashrc". This line
##!! has been moved to ./.bash_gamulti (this file) under "Other Variables".


## User Configuration Variables
# location of the gam binary (point to the directory, not the binary itself!)
	export gamPath=${HOME}"/bin/gam/"

# max number of gam executable threads per session (5 is default, leave this alone usually)
	export gamThreads="5"

# location of the oauth token files
	export gmTokenPath=${HOME}"/tokens/"

# set to 'yes' for verbose prompt
	export gmVerbosePrompt="yes"



## Other Variables (leave these alone usually)
	export gamThreads
	function gam () 
		{ "${gamPath}gam" "$@" ; }


## Functions

# Refresh gamulti environment
	function gmRefresh ()
	{
	gmActiveDomain=${gmRequestedDomain}
	export OAUTHFILE=${gmTokenPath}oauth2.txt-${gmActiveDomain}
	if [[ ${gmVerbosePrompt} == 'yes' ]]; then
		export PS1="\nActive GAM Domain: \[\e[41m ${gmActiveDomain} \e[m | use 'gmSetActiveDomain' to change domain\n\u<\w>$ "
	fi
	}

# List configured domains
	function gmListDomains ()
	{
	echo
	echo "Configured domains:"
	echo
	ls -1 ${gmTokenPath}oauth2.txt* | sed -e 's/.*oauth2.txt-//';
	echo
	}

# Set active domain
	function gmSetActiveDomain ()
	{
	# Prompt user for domain name.  Keep asking until they get it right.
	gmValidDomain=""
	gmRequestedDomain=${1}
	while [[ -z ${gmValidDomain} ]]
	do
		if [[ -z ${gmRequestedDomain} ]]; then
			echo
			read -p "Please select a domain (press return for list): " gmRequestedDomain
		fi
		if [[ -z ${gmRequestedDomain} ]]; then
			gmListDomains
		fi

		# Check that a token exists for the given domain
		if [[ ! -f ${gmTokenPath}oauth2.txt-${gmRequestedDomain} ]] && [[ ! -z ${gmRequestedDomain} ]]; then
			echo "${gmRequestedDomain} is not a configured domain."
			gmRequestedDomain=""
		else
		if [[ ! -z ${gmRequestedDomain} ]]; then	
			gmValidDomain="1"
		fi
		fi
	done

	gmRefresh

	# Send the user on their way with some useful feedback and reset their prompt
	echo 
	echo "!*** Active domain set to: ${gmActiveDomain}"
	echo "!*** Retrieving domain info..."
	echo
	gam info domain
	echo
	}

